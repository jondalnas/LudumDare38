package com.Jonas.LD38;

import java.awt.BorderLayout;
import java.awt.Canvas;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.image.BufferStrategy;
import java.awt.image.BufferedImage;
import java.awt.image.DataBufferInt;

import javax.swing.JFrame;
import javax.swing.JPanel;

import com.Jonas.LD38.Grapics.Renderer;

public class Main extends Canvas implements Runnable {
	private static final long serialVersionUID = 1L;
	
	public static int WIDTH = 160, HEIGHT = 120;
	public static int SCALE = 4;
	
	private int[] pixels;
	
	private BufferedImage img;
	private Thread thread;
	private Renderer renderer;
	private Game game;
	private Listener listener;
	
	private boolean running;
	
	public Main() {
		Dimension size = new Dimension(WIDTH * SCALE, HEIGHT * SCALE);
		
		setSize(size);
		
		img = new BufferedImage(WIDTH, HEIGHT, BufferedImage.TYPE_INT_RGB);
		pixels = ((DataBufferInt) img.getRaster().getDataBuffer()).getData();
		
		renderer = new Renderer(WIDTH, HEIGHT);
		game = new Game(WIDTH, HEIGHT);
		renderer.game = game;
		listener = new Listener();
		game.listener = listener;

		addKeyListener(listener);
		addMouseListener(listener);
		addMouseMotionListener(listener);
	}

	public static void main(String[] args) {
		Main game = new Main();
		
		JFrame frame = new JFrame("Game");
		JPanel panel = new JPanel(new BorderLayout());
		
		panel.add(game, 0);
		
		frame.setContentPane(panel);
		frame.pack();
		frame.setLocationRelativeTo(null);
		frame.setResizable(true);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setVisible(true);
		
		frame.setSize(new Dimension(frame.getWidth(), frame.getHeight()));
		frame.setPreferredSize(frame.getSize());
		
		game.start();
	}
	
	public void start() {
		if (running) return;
		running = true;
		
		thread = new Thread(this);
		thread.start();
	}

	int wantedFPS = 60;
	int FPS;
	public void run() {
		long last = System.currentTimeMillis();
		long curr = System.currentTimeMillis();
		int time = 0;
		int totalDifference = 0;
		
		requestFocus();
		
		while (running) {
			curr = System.currentTimeMillis();
			
			time += curr-last;
			totalDifference += curr-last;
			FPS++;
			if (totalDifference >= 1000) {
				System.out.println("FPS: " + FPS);
				FPS = 0;
				totalDifference = 0;
			}
			
			if (time >= (1.0/wantedFPS)*1000L) {
				tick();
				
				render();
				time = 0;
			}
			last = curr;
		}
	}
	
	public void tick() {
		game.tick();
	}
	
	public void render() {
		BufferStrategy bs = getBufferStrategy();
		if (bs == null) {
			createBufferStrategy(3);
			return;
		}
		
		renderer.render();
		
		for (int i = 0; i < pixels.length; i++) {
			pixels[i] = renderer.pixels[i];
		}
		
		Graphics graphics = bs.getDrawGraphics();
		graphics.fillRect(0, 0, getWidth(), getHeight());
		graphics.drawImage(img, 0, 0, this.getWidth(), this.getHeight(), null);
		graphics.dispose();
		bs.show();
	}
}